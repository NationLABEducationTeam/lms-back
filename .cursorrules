# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

# Scratchpad

## Project Overview - LMS Backend

### Architecture
- Express.js based Learning Management System backend
- AWS services integration
- Docker containerization

### Core Modules
- Courses management
- Enrollment management
- Student management
- User management
- AI features

### Tech Stack
- Backend: Express.js
- Databases: PostgreSQL, DynamoDB
- Cache: Redis
- Storage: AWS S3
- Auth: JWT
- Logging: Winston, Morgan

### Course Week Management Status

#### S3 Configuration
- Bucket: `nationslablmscoursebucket`
- Region: `ap-northeast-2` (Seoul)
- File Structure:
  ```
  강좌명/
  ├── 1주차/
  │   ├── 강의자료.pdf
  │   ├── 과제.docx
  │   └── 강의영상.mp4
  ├── 2주차/
  └── ...
  ```

#### Implemented Features
- S3 bucket and basic file structure setup
- File listing functionality by week
- File type categorization

#### Pending Features
- Weekly course creation API
- Course material upload API
- Weekly course modification/deletion API
- Integration between course materials and course DB

#### Supported File Types
- Documents: pdf, doc, docx
- Presentations: ppt, pptx
- Spreadsheets: xls, xlsx
- Media: jpg, jpeg, png, gif, mp4, mp3
- Others: txt, json, zip, rar

#### API Endpoints

##### Implemented Functions
```javascript
// S3 Utility Functions (src/utils/s3.js)
listCourseWeekMaterials(prefix)  // List all week materials for a course
listWeekFiles(weekPrefix)        // List files for specific week
getFileType(fileName)            // Determine file type

// Course Routes (src/routes/courses.js)
GET /courses/test-db             // Test DB connection
GET /courses/public             // Get all published courses
GET /courses                    // Get all courses
GET /courses/:courseId          // Get specific course
POST /courses/:courseId/enroll  // Enroll in course
GET /courses/my/progress        // Get student's course progress
POST /courses                   // Create new course
```

##### Required New APIs
```javascript
// Week Management
POST /courses/:courseId/weeks
{
    weekNumber: number,
    title: string,
    description: string,
    startDate: Date,
    endDate: Date
}

PUT /courses/:courseId/weeks/:weekNumber
DELETE /courses/:courseId/weeks/:weekNumber
GET /courses/:courseId/weeks
GET /courses/:courseId/weeks/:weekNumber

// Materials Management
POST /courses/:courseId/weeks/:weekNumber/materials
{
    files: File[],
    type: string,
    title: string,
    description: string
}

PUT /courses/:courseId/weeks/:weekNumber/materials/:materialId
DELETE /courses/:courseId/weeks/:weekNumber/materials/:materialId
GET /courses/:courseId/weeks/:weekNumber/materials
GET /courses/:courseId/weeks/:weekNumber/materials/:materialId
```